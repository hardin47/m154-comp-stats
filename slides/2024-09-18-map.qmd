---
title: "Mapping"
author: "Jo Hardin"
subtitle: "September 18, 2024"
format: 
  revealjs:
    incremental: false
    scrollable: true
    slide-number: true
    show-slide-number: all
    embed-resources: true
    multiplex: true
execute:
  echo: true
  warning: false
  message: false
--- 


```{r include=FALSE}
library(tidyverse)
library(knitr)
library(lubridate)
library(openintro)
```



# Agenda  9/18/24


1. `map`ping

## **purrr** for functional programming

**functionals** are functions that take function as input and return a vector / list / data frame as output. 

- alternatives to loops

- a functional is better than a `for` loop is better than `while` is better than `repeat` (in terms of computing efficiency)

## Benefits 


- encourages function logic to be separated from iteration logic

- can collapse into vectors/data frames easily


## Map

`map()` has (at least) two arguments, a data object and a function. It performs the function on each element of the data object and returns a list. We can also pass additional arguments into the function.

```{r,echo=FALSE,warning=FALSE,message=FALSE}
knitr::include_graphics(path = '../images/9_2_3_map-arg.png')
```



## variations of `map_` functions

:::: {.columns}
::: {.column width=50%}
The `map` functions are *named* by they **output** the produce.  For example: 

* `map(.x, .f)` is the main mapping function and returns a list

* `map_dbl(.x, .f)` returns a numeric (double) vector

* `map_chr(.x, .f)` returns a character vector

* `map_lgl(.x, .f)` returns a logical vector
:::

::: {.column width=50%}
```{r out.width = '90%', fig.align='center', echo=FALSE}
knitr::include_graphics("../images/purrr_map.png")
```
:::
::::


Note that the first argument is always the data object and the second object is always the function you want to iteratively apply to each element in the input object.

# `map()` in practice

## `map()` variants (output)

```{r}
#| error: true
triple <- function(x) x * 3
map(.x = c(1:3), .f = triple)

map_dbl(.x = c(1:3), .f = triple)

map_lgl (.x = c(1:3), .f = triple)

map_lgl(.x = c(1, NA, 3), .f = is.na)
```

## `fastfood` dataset from **openintro**

```{r}
library(openintro)
fastfood
```


From [TidyTuesday Fast food entree data](https://github.com/rfordatascience/tidytuesday/tree/master/data/2018/2018-09-04) on September 4, 2018.

## Anonymous functions and shortcuts

- use `~` to set a formula (when the function is neither a single name nor defined by `function(...) { ...} `)
- use `.x` to reference the input `map(.x = ..., .f = )`

```{r}
map_dbl(.x = fastfood, .f = function(dog) mean(dog, na.rm = TRUE))
```

```{r, eval=TRUE}
map_dbl(.x = fastfood,  .f = ~mean(.x, na.rm = TRUE))
```

```{r}
map_dbl(.x = fastfood, .f = mean, na.rm = TRUE)
```

```{r}
map_dbl(.x = fastfood, .f = mean)
```

## The same thing, many ways 


Note that `.x` is the **name** of the first argument in `map()` (`.f` is the name of the second argument).

```{r}
#| error: true
# the task
map_dbl(fastfood, function(x) length(unique(x)))
map_dbl(fastfood, function(unicorn) length(unique(unicorn)))
map_dbl(fastfood, ~length(unique(.x)))
map_dbl(fastfood, ~length(unique(..1)))
map_dbl(fastfood, ~length(unique(.)))

# not the task
map_dbl(fastfood, length)
```

```{r}
#| echo: false
#| message: false
#| warning: false
rm(x)
```

```{r}
#| error: true
#error
map_dbl(fastfood, ~length)
#error
map_dbl(fastfood, length(unique()))
#error
map_dbl(fastfood, ~length(unique(x)))
```

# Two+ arguments to `map()`

## `map_*()` variants (input)

```{r,echo=FALSE,warning=FALSE,message=FALSE}
knitr::include_graphics(path = '../images/map_variants.png')
```
We've already described the difference between the columns. Now we cover the difference between the rows.

## `map2_*()`

- `map2_*()` has two arguments, `.x` and `.y`
- raise each value of `.x` to the power of 2

```{r}
map_dbl(
  .x = c(1:5), 
  .f = function(x) x ^ 2
)
```

- raise each value `.x` to the power `.y`

```{r}
map2_dbl(
  .x = c(1:5), 
  .y = c(2:6), 
  .f = ~ (.x ^ .y)
)
```



## `imap()` {-}

- `imap()` is like `map2()`except that `.y` is derived from `names(.x)` if the data frame has names.

- If not, `.y` is 1, 2, 3, ... $n$ where $n$ is the number of items in `.x`.  (A data frame has $n$ columns.)

- These two calls produce the same result

```{r}
imap_chr(.x = fastfood, 
         .f = ~ paste(.y, "has a mean of", round(mean(.x), 1))) |> 
head()

map2_chr(.x = fastfood, 
         .y = names(fastfood),
         .f = ~ paste(.y, "has a mean of", round(mean(.x), 1))) |> 
head()
```


## `pmap()` {-}

- you can pass a named list or dataframe as arguments to a function

- for example `runif()` has the parameters `n`, `min` and `max`

```{r}
#| echo: false
params <- tibble::tribble(
  ~ n, ~ min, ~ max,
   1,     1,    10,
   2,    10,   100,
   3,   100,  1000
)
```

```{r}
params
pmap(params, runif)
```

Or use the pipe into `pmap()`:

```{r}
params |> 
  pmap(runif)
```

## An aside...

Interestingly, `runif()` will take either a scalar or a vector as its first argument.  If the first argument is a vector, `runif()` will return `N` random uniforms, where `N` is the length of the vector.

```{r}
runif(n = 3)
runif(n = c(1,3))
runif(n = c(10000,12321412424))
runif(n = c("rainbow", "unicorn"))
```

## `pmap()` vs `map()`

Which means that the `pmap()` code will "work" in `map()` as well:

::: {.panel-tabset}

## params

```{r}
params
```

## pmap

```{r}
params |> 
  pmap(runif)
```

## map
```{r}
params |> 
  map(runif)
```

:::

<!--
- could also be

```{r}
list(
  n = c(1, 2, 3), 
  min = c(1, 10, 100), 
  max = c(10, 100, 1000)) |> 
pmap(runif)
```
-->

## `pmap()` with `expand_grid()`

- I like to use `expand_grid()` when I want all possible parameter combinations.

```{r}
expand_grid(n = c(1, 2, 3), 
            min = c(1, 10),
            max = c(10, 100)) 

expand_grid(n = c(1, 2, 3), 
            min = c(1, 10),
            max = c(10, 100)) |> 
pmap(runif)
```


## `map`ping to a data frame

Would be great if the results were a data frame!

- results as rows: `map() |> list_rbind()`
- results as columns: `map() |> list_cbind()`

::: {.panel-tabset}

## function
```{r}
col_stats <- function(n) {
  head(fastfood, n) |> 
    summarise_all(mean, na.rm = TRUE) |> 
    mutate_all(floor) |> 
    mutate(n = paste("N =", n))
}
```

## `map()`
```{r}
out1 <- map(c(10,20), col_stats)

out1
```

## with `list_rbind()`
```{r}
out2 <- map(c(10,20), col_stats) |> list_rbind()

out2
```

## with `list_cbind()`
```{r}
out3 <- map(c(10,20), col_stats) |> list_cbind()

out3
```
:::




---
title: "latent Dirichlet allocation"
author: "Jo Hardin"
subtitle: "December 4, 2024"
format:
  revealjs:
    html-math-method: mathjax
    incremental: false
    scrollable: true
    slide-number: true
    show-slide-number: all
    embed-resources: true
execute:
  echo: true
  warning: false
  message: false
bibliography: 
  - ../slides.bib
editor: 
  markdown: 
    wrap: sentence
---

```{r include=FALSE}
library(tidyverse)
```

# Agenda 12/04/24

1.  LDA
2.  who does statistics / data science?

# LDA

> In natural language processing, latent Dirichlet allocation (LDA) is a Bayesian network (and, therefore, a generative statistical model) for modeling automatically extracted topics in textual corpora...
> In this, observations (e.g., words) are collected into documents, and each word's presence is attributable to one of the document's topics.
> Each document will contain a small number of topics.

From https://en.wikipedia.org/wiki/Latent_Dirichlet_allocation

## Toy example of LDA

<!-- Another good blog with a toy example: https://medium.com/@corymaklin/latent-dirichlet-allocation-dfcea0b1fddc -->

How can we figure out (unsupervised!) the underlying topic of each of a set of documents?[^1]

[^1]: Heavily inspired by Luis Serrano's <a href = "https://www.youtube.com/watch?v=BaM1uiCpj_E" target = "_blank">youtube video</a>.
    Also note his other <a href = "https://serrano.academy/" target = "_blank">educational materials</a>

## Data

Start with documents that each contain words:

```{r}
#| echo: false
# Data for rectangles

xmin <- c(1, 5, 9, 13)
xmax <- c(4, 8, 12, 16)
ymin <- c(1, 1, 1, 1)
ymax <- c(6, 6, 6, 6)

rectangles <- data.frame(
  xmin = xmin,
  xmax = xmax,
  ymin = ymin,
  ymax = ymax,
  group = c("Doc A", "Doc B", "Doc C", "Doc D"),
  group1 = c("Sports", "Politics", "Science", "Science"),
  group2 = c("80% Topic 3", "80% Topic 2", "80% Topic 1", "60% Topic 1"),
  topic2 = c("T3", "T2", "T1", "T1"),
  group3 = c("20% Topic 1", "20% Topic 1", "20% Topic 3", "20% Topic 2"),
  topic3 = c("T1", "T1", "T3", "T2"),
  group4 = c("", "", "", "20% Topic 3"),
  topic4 = c("T1", "T1", "T3", "T3")
)

#<span style="color:#f47c70">Topic 1</span> , <span style="color:#14bc44">Topic 2</span>, <span style="color:#689cfc">Topic 3</span>

# Data for words
words <- data.frame(
  group = rep(c("A", "B", "C", "D"), each = 5),
  x = rep((xmin + xmax)/2, each = 5),  # Center of each rectangle
  y = rep(seq(ymax[1] - 0.5, ymin[1] + 0.5, length.out = 5), 4),  # Adjust vertical positions for words
  word = rep(c("ball", "ball", "ball", "planet", "galaxy",
               "referendum", "planet", "planet", "referendum", "referendum",
               "planet", "planet", "galaxy", "planet", "ball",
               "planet", "galaxy", "referendum", "planet", "ball")),
  gibberish = rep(c("fyntraq", "fyntraq", "fyntraq", "voblicht", "blythar",
               "zorflan", "voblicht", "voblicht", "zorflan", "zorflan",
               "voblicht", "voblicht", "blythar", "voblicht", "fyntraq",
               "voblicht", "blythar", "zorflan", "voblicht", "fyntraq")),
  topic1 = c("T3", "T3", "T3", "T1", "T3",
              "T2", "T1", "T2", "T2", "T2",
              "T1", "T1", "T1", "T1", "T3",
              "T1", "T1", "T2", "T1", "T3"),
  words2 = c(rep("planet", 8),
             rep("referendum", 4),
             rep("ball", 5),
             rep("galaxy", 3)),
  topic2 = c(rep("T3", 2), "T2", rep("T3",5),
             rep("T2", 4),
             rep("T1", 5),
             "T1", rep("T3", 2)),
  x2 = rep((xmin + xmax)/2, c(8, 4, 5, 3)),  # Center of each rectangle
  y2 = c(seq(ymax[1] - 0.5, ymin[1] + 0.5, length.out = 8),
         seq(ymax[1] - 0.5, ymin[1] + 0.5, length.out = 4),
         seq(ymax[1] - 0.5, ymin[1] + 0.5, length.out = 5),
         seq(ymax[1] - 0.5, ymin[1] + 0.5, length.out = 3)),
  topic3 = c("T3", "T1", "T1", "T3", "T3",
             "T2", "T3", "T3", "T2", "T3",
             "T3", "T1", "T3", "T2", "T2",
             "T3", "T1", "T2", "T3", "T1")
)

# Create the plot
ggplot() +
  geom_rect(data = rectangles, 
            aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax),
            color = "black", fill = "white") +
  geom_text(data = words, aes(x = x, y = y, label = word), size = 8) +
  geom_text(data = rectangles, aes(x = (xmin + xmax) / 2, y = ymax + 0.5,
            label = group), size = 12) + 
  coord_fixed() +  
  theme_void() 
```

## Assign topics

As a human, assign topics: Science, Politics, Sports

```{r}
#| echo: false

ggplot() +
  geom_rect(data = rectangles, 
            aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax),
            color = "black", fill = "white") +
  geom_text(data = words, aes(x = x, y = y, label = word), size = 8) +
  geom_text(data = rectangles, aes(x = (xmin + xmax) / 2, y = ymax + 0.5,
            label = group), size = 12) + 
  coord_fixed() +  
  theme_void() 
```

## One potential assignment:

```{r}
#| echo: false

ggplot() +
  geom_rect(data = rectangles, 
            aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax),
            color = "black", fill = "white") +
  geom_text(data = words, aes(x = x, y = y, label = word), size = 8) +
  geom_text(data = rectangles, 
            aes(x = (xmin + xmax) / 2, 
                y = ymax + 0.5,
                label = group), size = 12) + 
  geom_text(data = rectangles, 
            aes(x = (xmin + xmax) / 2, 
                y = ymin - 0.5,
                label = group1), size = 8)  + 
  coord_fixed() +  
  theme_void()
```

## No intuition

What if you don't have any idea what the words mean (i.e., what if you are the computer)?

```{r}
#| echo: false

ggplot() +
  geom_rect(data = rectangles, 
            aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax),
            color = "black", fill = "white") +
  geom_text(data = words, 
            aes(x = x, y = y, 
                label = gibberish), size = 8) +
  geom_text(data = rectangles, 
            aes(x = (xmin + xmax) / 2, 
                y = ymax + 0.5,
                label = group), size = 12) + 
  coord_fixed() +  
  theme_void()
```

## Computer assignment of topics

**without** using the definitions of the words:\
[Topic 1]{style="color:#f47c70"} , [Topic 2]{style="color:#14bc44"}, [Topic 3]{style="color:#689cfc"}

```{r}
#| echo: false

ggplot() +
  geom_rect(data = rectangles, 
            aes(xmin = xmin, xmax = xmax, 
                ymin = ymin, ymax = ymax),
            color = "black", fill = "white") +
  geom_text(data = words, 
            aes(x = x, y = y, 
                label = word), size = 8) +
  geom_text(data = rectangles, 
            aes(x = (xmin + xmax) / 2, 
                y = ymax + 0.5,
                label = group), size = 12) + 
  coord_fixed() +  
  theme_void()  
```

## Assign a topic to each word

```{r}
#| echo: false

ggplot() +
  geom_rect(data = rectangles, 
            aes(xmin = xmin-.5, xmax = xmax, 
                ymin = ymin, ymax = ymax),
            color = "black", fill = "white") +
  geom_text(data = words, 
            aes(x = x + .2, y = y, 
                label = word), size = 8) +
  geom_text(data = words, 
            aes(x = x - 1.5, y = y, 
                label = topic1, color = topic1), size = 8) +
  geom_text(data = rectangles, 
            aes(x = (xmin + xmax) / 2, 
                y = ymax + 0.5,
                label = group), size = 12) + 
  coord_fixed() +  
  theme_void() + 
  theme(legend.position = "none")
```

## Assign a topic to each word

```{r}
#| echo: false

ggplot() +
  geom_rect(data = rectangles, 
            aes(xmin = xmin, xmax = xmax, 
                ymin = ymin, ymax = ymax),
            color = "black", fill = "white") +
  geom_text(data = words, 
            aes(x = x, y = y, 
                label = word, color = topic1), size = 8) +
  geom_text(data = rectangles, 
            aes(x = (xmin + xmax) / 2, 
                y = ymax + 0.5,
                label = group), size = 12) + 
  coord_fixed() +  
  theme_void() + 
  theme(legend.position = "none")
```

## Topic frequency

```{r}
#| echo: false

ggplot() +
  geom_rect(data = rectangles, 
            aes(xmin = xmin, xmax = xmax, 
                ymin = ymin, ymax = ymax),
            color = "black", fill = "white") +
  geom_text(data = words, 
            aes(x = x, y = y, 
                label = word, color = topic1), size = 8) +
  geom_text(data = rectangles, 
            aes(x = (xmin + xmax) / 2, 
                y = ymax + 0.5,
                label = group), size = 12) +
  geom_text(data = rectangles,
            aes(x = (xmin + xmax) / 2,
                y = ymin - 0.5,
                label = group2,
                color = topic2), size = 8) + 
  geom_text(data = rectangles,
            aes(x = (xmin + xmax) / 2,
                y = ymin - 1,
                label = group3,
                color = topic3), size = 8) + 
  geom_text(data = rectangles,
            aes(x = (xmin + xmax) / 2,
                y = ymin - 1.5,
                label = group4,
                color = topic4), size = 8) + 
  coord_fixed() +  
  theme_void() + 
  theme(legend.position = "none")
```

## Article property

Property 1: articles are as homogeneous as possible

## What about the words?

```{r}
#| echo: false

ggplot() +
  geom_text(data = words, 
            aes(x = x2, y = y2, 
                label = words2, color = topic2), size = 8) +
  coord_fixed() +  
  theme_void() + 
  theme(legend.position = "none")
```

## Word property

Property 2: words are as homogeneous as possible

```{r}
#| echo: false

ggplot() +
  geom_text(data = words, 
            aes(x = x2, y = y2, 
                label = words2, color = topic2), size = 8) +
  coord_fixed() +  
  theme_void() + 
  theme(legend.position = "none")
```

## Goal of LDA:

Color each word with [red]{style="color:#f47c70"} , [green]{style="color:#14bc44"}, [blue]{style="color:#689cfc"} such that

1.  articles are as homogeneous as possible
2.  words are as homogeneous as possible

## Gibbs Sampling

Organize the words **one at a time**, trying to make the articles (Goal #1) and words (Goal #2) as consistent as possible.

$\Rightarrow$ assume that all the other words are correct, and try to predict the topic of a given word.

## Predicting the word's topic

```{r}
#| echo: false

ggplot() +
  geom_rect(data = rectangles, 
            aes(xmin = xmin, xmax = xmax, 
                ymin = ymin, ymax = ymax),
            color = "black", fill = "white") +
  geom_text(data = words, 
            aes(x = x, y = y, 
                label = word, color = topic3), size = 8) +
  geom_text(data = rectangles, 
            aes(x = (xmin + xmax) / 2, 
                y = ymax + 0.5,
                label = group), size = 12) + 
  geom_text(data = words,
            aes(x = x[1], y = y[1]), 
            label = "ball", color = "black", size = 8) +
  coord_fixed() +  
  theme_void() + 
  theme(legend.position = "none")
```

Do we color **ball** [red]{style="color:#f47c70"} , [green]{style="color:#14bc44"}, or [blue]{style="color:#689cfc"}?

## Predicting the word's topic (Goal #1)

```{r}
#| echo: false

ggplot() +
  geom_rect(data = rectangles, 
            aes(xmin = xmin, xmax = xmax, 
                ymin = ymin, ymax = ymax),
            color = "black", fill = "white") +
  geom_text(data = words, 
            aes(x = x, y = y, 
                label = word, color = topic3), size = 8) +
  geom_text(data = rectangles, 
            aes(x = (xmin + xmax) / 2, 
                y = ymax + 0.5,
                label = group), size = 12) + 
  geom_text(data = words,
            aes(x = x[1], y = y[1]), 
            label = "ball", color = "black", size = 8) +
  coord_fixed() +  
  theme_void() + 
  theme(legend.position = "none")
```

| [Topic 1]{style="color:#f47c70"} | [Topic 2]{style="color:#14bc44"} | [Topic 3]{style="color:#689cfc"} |
|----|----|----|
| Doc A: how many words in [Topic 1]{style="color:#f47c70"} | Doc A: how many words in [Topic 2]{style="color:#14bc44"} | Doc A: how many words in [Topic 3]{style="color:#689cfc"} |
| [2]{style="color:#f47c70"} | [0]{style="color:#14bc44"} | [2]{style="color:#689cfc"} |




## Predicting the word's topic (Goal #2)

```{r}
#| echo: false

ggplot() +
  geom_rect(data = rectangles, 
            aes(xmin = xmin, xmax = xmax, 
                ymin = ymin, ymax = ymax),
            color = "black", fill = "white") +
  geom_text(data = words[c(1:3,15,20),], 
            aes(x = x, y = y, 
                label = word, color = topic3), size = 8) +
  geom_text(data = words,
            aes(x = x[1], y = y[1]), 
            label = "ball", color = "black", size = 8) +  
  geom_text(data = rectangles, 
            aes(x = (xmin + xmax) / 2, 
                y = ymax + 0.5,
                label = group), size = 12) + 
  coord_fixed() +  
  theme_void() + 
  theme(legend.position = "none")
```

| [Topic 1]{style="color:#f47c70"} | [Topic 2]{style="color:#14bc44"} | [Topic 3]{style="color:#689cfc"} |
|----|----|----|
|How often is **ball** in [Topic 1]{style="color:#f47c70"}  | How often is **ball** in [Topic 2]{style="color:#14bc44"} | How often is **ball** in [Topic 3]{style="color:#689cfc"}|
| [3]{style="color:#f47c70"} | [1]{style="color:#14bc44"} | [0]{style="color:#689cfc"} |


## Data without first word

| [Topic 1]{style="color:#f47c70"} | [Topic 2]{style="color:#14bc44"} | [Topic 3]{style="color:#689cfc"} |
|----|----|----|
| Doc A: how many words in [Topic 1]{style="color:#f47c70"} | Doc A: how many words in [Topic 2]{style="color:#14bc44"} | Doc A: how many words in [Topic 3]{style="color:#689cfc"} |
| [2]{style="color:#f47c70"} | [0]{style="color:#14bc44"} | [2]{style="color:#689cfc"} |
|How often is **ball** in [Topic 1]{style="color:#f47c70"}  | How often is **ball** in [Topic 2]{style="color:#14bc44"} | How often is **ball** in [Topic 3]{style="color:#689cfc"}|
| [3]{style="color:#f47c70"} | [1]{style="color:#14bc44"} | [0]{style="color:#689cfc"} |


## Probability of topic

$$
\begin{align}P(z_i = k' | z_{-i}, W) \propto & \frac{\# \mbox{ words in $d_i$ with $k'$} + \alpha}{\# \mbox{ words in $d_i$ with any topic} + K \cdot \alpha} \cdot \\ 
&\frac{\# \mbox{ times $i^{th}$ word is in topic $k'$} + \beta}{\# \mbox{ words in topic $k'$} + V \cdot \beta}
\end{align}
$$

* $z_i$ is the topic of the $i^{th}$ word
* $z_{-i}$ are the topics of all the words other than the $i^{th}$ word
* $d_i$ is the document of $i^{th}$ word
* $W$ represents all of the words
* $K$ is the total number of topics
* $V$ is the total number of words
* $\alpha$ and $\beta$ are tuning parameter

## Probability that ball is in each topic

$$
\begin{align}P(ball_1 = \mbox{Topic 1} | z_{-i}, W) \propto& \frac{2 + \alpha}{4 + 3 \cdot \alpha} \cdot \frac{3 + \beta}{5 + 4 \cdot \beta}
\end{align}
$$

$$
\begin{align}P(ball_1 = \mbox{Topic 2} | z_{-i}, W) \propto& \frac{0 + \alpha}{4 + 3 \cdot \alpha} \cdot \frac{1 + \beta}{5 + 4 \cdot \beta}
\end{align}
$$

$$
\begin{align}P(ball_1 = \mbox{Topic 3} | z_{-i}, W) \propto& \frac{2 + \alpha}{4 + 3 \cdot \alpha} \cdot \frac{0 + \beta}{5 + 4 \cdot \beta}
\end{align}
$$

## Probability that ball is in each topic

$$
\require{cancel}
\begin{align}P(ball_1 = \mbox{Topic 1} | z_{-i}, W) \propto& \frac{2 + \cancel{\alpha} \overset{0.3}{}}{4 + 3 \cdot \cancel{\alpha} \overset{0.3}{}} \cdot \frac{3 + \cancel{\beta} \overset{0.25}{}}{5 + 4 \cdot \cancel{\beta} \overset{0.25}{}} = 0.2543
\end{align}
$$

$$
\begin{align}P(ball_1 = \mbox{Topic 2} | z_{-i}, W) \propto& \frac{0 + \cancel{\alpha} \overset{0.3}{}}{4 + 3 \cdot \cancel{\alpha} \overset{0.3}{}} \cdot \frac{1 + \cancel{\beta} \overset{0.25}{}}{5 + 4 \cdot \cancel{\beta} \overset{0.25}{}} = 0.0128
\end{align}
$$

$$
\begin{align}P(ball_1 = \mbox{Topic 3} | z_{-i}, W) \propto& \frac{2 + \cancel{\alpha} \overset{0.3}{}}{4 + 3 \cdot \cancel{\alpha} \overset{0.3}{}} \cdot \frac{0 + \cancel{\beta} \overset{0.25}{}}{5 + 4 \cdot \cancel{\beta} \overset{0.25}{}} = 0.0196
\end{align}
$$


$\rightarrow$ assign [Topic 1]{style="color:#f47c70"}  to the first instance of **ball**

## Next step

Update the first instance of **[ball]{style="color:#f47c70"}** and move on to the second instance of **ball**. (Keep iterating!)

```{r}
#| echo: false

ggplot() +
  geom_rect(data = rectangles, 
            aes(xmin = xmin, xmax = xmax, 
                ymin = ymin, ymax = ymax),
            color = "black", fill = "white") +
  geom_text(data = words, 
            aes(x = x, y = y, 
                label = word, color = topic3), size = 8) +
  geom_text(data = rectangles, 
            aes(x = (xmin + xmax) / 2, 
                y = ymax + 0.5,
                label = group), size = 12) + 
  geom_text(data = words,
            aes(x = x[1], y = y[1]), 
            label = "ball", color = "#f47c70", size = 8) +
    geom_text(data = words,
            aes(x = x[2], y = y[2]), 
            label = "ball", color = "black", size = 8) +
  coord_fixed() +  
  theme_void() + 
  theme(legend.position = "none")
```

## What is the topic of a training document?

$$\mbox{Topic}(d) = \mbox{arg} \max_k \theta_{d,k}$$

where $\theta_{d,k}$ is the probability of topic $k$ for document $d$. 

$\theta_{d,k}$ is estimated as the proportion of topic $k$ in document $d$.

## What is the topic of a test document?

* For each word in the document, you get a probability for each topic, based on the learned topic-word distribution 

* The probability of a topic $k$ for the new document is essentially the weighted sum of the topic probabilities for all the words in the document, considering their relative importance.

## Example (from Math 154)

::: {.callout-note icon=false}
## LDA on TSL

In fall 2015, Benji Lu, Kai Fukutaki, and Ziqi Xiong performed LDA on *The Student Life* articles for their computational statistics project: <a href = "https://ziqixiong.shinyapps.io/TopicModeling/" target = "_blank">https://ziqixiong.shinyapps.io/TopicModeling/</a>

:::


## Statisticians & Data Scientists

Who does statistics?

<a href = "https://hardin47.github.io/CURV/" target = "_blank">connecting, uplifting, and recognizing voices</a> -- a database of statisticians and data scientists.

<!-- Liz Hare + Ibo tweets, Rafa Irizarry + hurricane Maria, David Blackwell -->



